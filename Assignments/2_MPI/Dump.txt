// // Use for printing sequentially...
// int sts = 0;
// if (myid == 0) {
//     for (i = 0; i < lnx; i++) {
//         printf("uMatQK[%d] = %.4f\n",i,l_uMat_QK[i]);
//     }
//     MPI_Send(&sts, 1, MPI_INT, myid+1,10,MPI_COMM_WORLD);
// }
// else if (myid == np - 1) {
//     MPI_Recv(&sts, 1, MPI_INT,myid-1,MPI_ANY_TAG,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
//     for (i = 0; i < lnx; i++) {
//         printf("uMatQK[%d] = %.4f\n",dsplc[myid]+i,l_uMat_QK[i]);
//     }
// }
// else {
//     MPI_Recv(&sts, 1, MPI_INT,myid-1,MPI_ANY_TAG,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
//     for (i = 0; i < lnx; i++) {
//         printf("uMatQK[%d] = %.4f\n",dsplc[myid]+i,l_uMat_QK[i]);
//     }
//     MPI_Send(&sts, 1, MPI_INT, myid+1,10,MPI_COMM_WORLD);
// }

// printf("\nPrinting phivsy0 in P0...\n");
// for (i = 0; i < ny; i++) {
//     printf("val[%d] = %.4f\n",i,phivsy0[i]);
// }


// // Use for printing sequentially...
// int sts = 0;
// if (myid == 0) {
//     printf("\n");
//     for (i = 0; i < lnx; i++) {
//         for (j = 0; j < ny; j++) {
//             printf("%d - (%2.0f,%2.0f) \t %.4f\n",myid,double(dsplc[myid]+i),double(j),phik1[i+1][j]);
//         }
//         printf("\n");
//     }
//     MPI_Send(&sts, 1, MPI_INT, myid+1,10,MPI_COMM_WORLD);
// }
// else if (myid == np - 1) {
//     MPI_Recv(&sts, 1, MPI_INT,myid-1,MPI_ANY_TAG,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
//     for (i = 0; i < lnx; i++) {
//         for (j = 0; j < ny; j++) {
//             printf("%d - (%2.0f,%2.0f) \t %.4f\n",myid,double(dsplc[myid]+i),double(j),phik1[i+1][j]);
//         }
//         printf("\n");
//     }
// }
// else {
//     MPI_Recv(&sts, 1, MPI_INT,myid-1,MPI_ANY_TAG,MPI_COMM_WORLD,MPI_STATUS_IGNORE);
//     for (i = 0; i < lnx; i++) {
//         for (j = 0; j < ny; j++) {
//             printf("%d - (%2.0f,%2.0f) \t %.4f\n",myid,double(dsplc[myid]+i),double(j),phik1[i+1][j]);
//         }
//         printf("\n");
//     }
//     MPI_Send(&sts, 1, MPI_INT, myid+1,10,MPI_COMM_WORLD);
// }

// SOME ADDRESS FINDING BUSINESS
// double* pntr = &phik1[1][rind];
// for (i = 0; i < cnt; i++) {
//     for (j = 0; j < BL; j++) {
//         int tmp = rind + ST*i + j + ny;
//         printf("%d - val[%d][%d] = %.4f\n",myid,int(tmp/ny),(tmp%ny),*(pntr + ST*i + j));
//     }
// }

// for (i = 0; i < lnx; i++) {
//     printf("%d - val[%2.0f][%d] = %.4f\t",myid,double(dsplc[myid]+i),rind,phik1[i][rind]);
//     std::cout << &phik1[i][rind] << "\t" << &phik1[i][rind] - &phik1[i-1][rind] << "\n";
// }

// if (myid == 0) {
//     for (i = 0; i < lnx; i++) {
//         for (j = 0; j < ny; j++) {
//             std::cout << i << ", " << j << "\t" << &phik1[i][j] << "\n";
//         }
//     }
// }


// printf("\nPrinting phivsy0 in P0...\n");
// for (i = 0; i < ny; i++) {
//     printf("val[%d] = %.4f\n",i,phivsy0[i]);
// }

// printf("\nPrinting phivsx0 in P0...\n");
// for (i = 0; i < nx; i++) {
//     printf("val[%d] = %.4f\n",i,phivsx0[i]);
// }