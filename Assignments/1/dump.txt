C++:
Rec_Doub.cpp:
            // if (i < N - l1) {
            //     alpi_k[i] = 0;
            //     beti_k[i] = -ci_k[i]/bi_k[i+l1-1];

            //     bi_k1[i] += beti_k[i]*ai_k[i+l1-1];
            //     yi_k1[i] += beti_k[i]*yi_k[i+l1-1];
            // }
            // else if (i >= l1) {
            //     alpi_k[i] = -ai_k[i]/bi_k[i-l1-1];
            //     beti_k[i] = 0;

            //     bi_k1[i] += alpi_k[i]*ci_k[i-l1-1];
            //     yi_k1[i] += alpi_k[i]*yi_k[i-l1-1];
            // }
            // else {
            //     alpi_k[i] = 0;
            //     beti_k[i] = 0;

            //     bi_k1[i] += beti_k[i]*ai_k[i+l1-1] + alpi_k[i]*ci_k[i-l1-1];
            //     yi_k1[i] += beti_k[i]*yi_k[i+l1-1] + alpi_k[i]*yi_k[i-l1-1];
            // }

            // if (i < N - l2) {
            //     ai_k1[i] = 0;
            //     ci_k1[i] = beti_k[i]*ci_k[i+l1-1];

            // }
            // else if (i >= l2) {
            //     ai_k1[i] = alpi_k[i]*ai_k[i-l1-1];
            //     ci_k1[i] = 0;
                
            // }
            // else {
            //     ai_k1[i] = 0;
            //     ci_k1[i] = 0;
            // }

    // A[0][0] = 3;
    // A[0][1] = -1;
    // A[1][0] = -1;
    // A[1][1] = 3;
    // A[1][2] = -1;
    // A[2][1] = -1;
    // A[2][2] = 3;
    // A[2][3] = -1;
    // A[3][2] = -1;
    // A[3][3] = 3;

    // yi_k[0] = 2;
    // yi_k[1] = 1;
    // yi_k[2] = 1;
    // yi_k[3] = 2;


            // printf("alpi = \n");
            // printVector(alpi_k, N);
            // printf("ai = \n");
            // printVector(ai_k1, N);
            // printf("beti = \n");
            // printVector(beti_k, N);
            // printf("ci = \n");
            // printVector(ci_k1, N);
            // printf("bi = \n");
            // printVector(bi_k1, N);
            // printf("yi = \n");
            // printVector(yi_k1, N);
            // printf("\n");

MATLAB:
A1_test2.m:
        % if (i < N - l1)
        %     alpi_k(i) = 0;
        %     beti_k(i) = -ci_k(i)/bi_k(i+l1);
        % 
        %     bi_k1(i) = bi_k1(i) + beti_k(i)*ai_k(i+l1);
        %     yi_k1(i) = yi_k1(i) + beti_k(i)*yi_k(i+l1);
        % elseif (i >= l1+1)
        %     alpi_k(i) = -ai_k(i)/bi_k(i-l1);
        %     beti_k(i) = 0;
        % 
        %     bi_k1(i) = bi_k1(i) + alpi_k(i)*ci_k(i-l1);
        %     yi_k1(i) = yi_k1(i) + alpi_k(i)*yi_k(i-l1);
        % else
        %     alpi_k(i) = 0;
        %     beti_k(i) = 0;
        % 
        %     bi_k1(i) = bi_k1(i) + beti_k(i)*ai_k(i+l1) + alpi_k(i)*ci_k(i-l1);
        %     yi_k1(i) = yi_k1(i) + beti_k(i)*yi_k(i+l1) + alpi_k(i)*yi_k(i-l1);
        % end

        % if (i < N - l2)
        %     ai_k1(i) = 0;
        %     ci_k1(i) = beti_k(i)*ci_k(i+l1);
        % elseif (i >= l2 + 1)
        %     ai_k1(i) = alpi_k(i)*ai_k(i-l1);
        %     ci_k1(i) = 0;
        % else
        %     ai_k1(i) = 0;
        %     ci_k1(i) = 0;
        % end